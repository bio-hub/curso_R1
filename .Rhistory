meteoritos_clean |>
xtabs(nametype, fall)
#tabela cruzada entre tipo de meteorito e se caiu ou foi encontrado
meteoritos_clean |>
xtabs(~ nametype+fall)
#tabela cruzada entre tipo de meteorito e se caiu ou foi encontrado
meteoritos_clean |>
xtabs(~ fall + nametype, data = .)
#tabela cruzada entre tipo de meteorito e se caiu ou foi encontrado
meteoritos_clean %>%
xtabs(~ fall + nametype, data = .)
meteoritos_clean %>%
crosstab(fall, nametype)
meteoritos_clean %>%
tabyl(fall, nametype)
meteoritos_clean %>%
tabyl(fall, nametype)
meteoritos_clean %>%
tabyl(fall, nametype) |>
class()
meteoritos_clean %>%
xtabs(~ fall + nametype, data = .)
meteoritos_clean %>%
xtabs(~ fall + nametype, data = .) |>
class()
meteoritos_clean %>%
xtabs(~ fall + nametype, data = .)
library(rstatix)
glimpse(meteoritos_clean)
#medidas de dispersão e centralidade
meteoritos_clean |>
select(massa, log2_mass) |>
get_summary_stats()
#medidas de dispersão e centralidade
meteoritos_clean |>
select(mass, log2_mass) |>
get_summary_stats()
meteoritos_clean |>
#converter tipos de variáveis
meteoritos_clean = meteoritos |>
clean_names() |>
mutate(recclass = na_if(recclass, "Unknown")) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ tolower(.x)) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ as.factor(.x)) |>
mutate(nametype = fct_relevel(nametype, c("valid", "relict"))) |>
mutate(fall = fct_relevel(fall, c("fell", "found"))) |>
mutate(mass_log2 = log2(mass)) |>
relocate(mass_log2, .after = mass) |>
select(-geo_location) |>
drop_na()
#converter tipos de variáveis
meteoritos_clean = meteoritos |>
clean_names() |>
mutate(recclass = na_if(recclass, "Unknown")) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ tolower(.x)) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ as.factor(.x)) |>
mutate(nametype = fct_relevel(nametype, c("valid", "relict"))) |>
mutate(fall = fct_relevel(fall, c("fell", "found"))) |>
mutate(mass_log2 = log2(mass)) |>
relocate(mass_log2, .after = mass) |>
select(-geo_location) |>
drop_na()
#medidas de dispersão e centralidade
meteoritos_clean |>
select(mass, mass_log2) |>
get_summary_stats()
meteoritos_clean |>
filter(mass_log2 == -Inf) |>
View()
#converter tipos de variáveis
meteoritos_clean = meteoritos |>
clean_names() |>
mutate(recclass = na_if(recclass, "Unknown")) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ tolower(.x)) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ as.factor(.x)) |>
mutate(nametype = fct_relevel(nametype, c("valid", "relict"))) |>
mutate(fall = fct_relevel(fall, c("fell", "found"))) |>
filter(mass > 0) |>
mutate(mass_log2 = log2(mass)) |>
relocate(mass_log2, .after = mass) |>
select(-geo_location) |>
drop_na()
#medidas de dispersão e centralidade
meteoritos_clean |>
select(mass, mass_log2) |>
get_summary_stats()
filter(mass_log2 <0) |>
View()
meteoritos_clean |> filter(mass_log2 <0) |> View()
#converter tipos de variáveis
meteoritos_clean = meteoritos |>
clean_names() |>
mutate(recclass = na_if(recclass, "Unknown")) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ tolower(.x)) |>
mutate_at(.vars = vars(nametype, fall),
.funs = ~ as.factor(.x)) |>
mutate(nametype = fct_relevel(nametype, c("valid", "relict"))) |>
mutate(fall = fct_relevel(fall, c("fell", "found"))) |>
filter(mass >= 1) |>
mutate(mass_log2 = log2(mass)) |>
relocate(mass_log2, .after = mass) |>
select(-geo_location) |>
drop_na()
#medidas de dispersão e centralidade
meteoritos_clean |>
select(mass, mass_log2) |>
get_summary_stats()
#medidas de dispersão e centralidade
meteoritos_clean |>
group_by(fall)
#medidas de dispersão e centralidade
meteoritos_clean |>
group_by(fall) |>
select(mass, mass_log2) |>
get_summary_stats()
#medidas de dispersão e centralidade
meteoritos_clean |>
group_by(nametype) |>
select(mass, mass_log2) |>
get_summary_stats()
#medidas de dispersão e centralidade
meteoritos_clean |>
group_by(nametype, fall) |>
select(mass, mass_log2) |>
get_summary_stats()
? get_summary_stats
#medidas de dispersão e centralidade
meteoritos_clean |>
group_by(nametype, fall) |>
select(mass, mass_log2) |>
get_summary_stats() |>
View()
glimpse(meteoritos_clean)
#carregar os dados
#https://www.kaggle.com/datasets/nasa/meteorite-landings
meteoritos = read.csv2("datasets/crab_age_prediction/CrabAgePrediction.csv")
#carregar os dados
#https://www.kaggle.com/datasets/nasa/meteorite-landings
meteoritos = read_csv("datasets/crab_age_prediction/CrabAgePrediction.csv")
library(tidyverse)
library(janitor)
library(data.table)
library(rstatix)
#carregar os dados
#https://www.kaggle.com/datasets/nasa/meteorite-landings
meteoritos = read_csv("datasets/crab_age_prediction/CrabAgePrediction.csv")
View(meteoritos)
#carregar os dados
#https://www.kaggle.com/datasets/nasa/meteorite-landings
caranguejo = read_csv("datasets/crab_age_prediction/CrabAgePrediction.csv")
rm(meteoritos)
library(skimr)
skimr(caranguejo)
#visao geral dos dados
glimpse(caranguejo)
skim(caranguejo)
#transformação dos dados
caranguejo_clean = caranguejo |>
clean_names() |>
mutate(sex = na_if(sex, "I")) |>
mutate(age = as.integer(age))
skim(caranguejo_clean)
#transformação dos dados
caranguejo_clean = caranguejo |>
clean_names() |>
mutate(sex = na_if(sex, "I")) |>
mutate(sex = fct_relevel(sex, c("M", "F"))) |>
mutate(age = as.integer(age)) |>
drop_na()
skim(caranguejo_clean)
#testes de normalidade
caranguejo_clean |>
select(where(is.numeric))
#testes de normalidade
caranguejo_clean |>
select(where(is.numeric)) |>
shapiro_test()
#testes de normalidade
caranguejo_clean |>
select(where(is.numeric)) |>
shapiro_test(.)
#testes de normalidade
caranguejo_clean |>
shapiro_test(where(is.numeric))
#testes de normalidade
caranguejo_clean |>
select(where(is.numeric)) |>
shapiro_test()
?shapiro_test
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = where(is.numeric))
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = select(where(is.numeric)))
#testes de normalidade
caranguejo_clean |>
select(where(is.numeric)) |>
shapiro_test()
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = everything())
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = select(everything()))
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = vars(everything()))
#testes de normalidade
caranguejo_clean |>
shapiro_test(vars = vars(where(is.numeric)))
#testes de normalidade
caranguejo_clean |>
shapiro_test(length:shell_weight)
#testes de normalidade
caranguejo_clean |>
shapiro_test(length,shell_weight)
#testes de normalidade
caranguejo_clean |>
shapiro_test(length,
diameter,
height,
weight,
shucked_weight,
viscera_weight,
shell_weight)
caranguejo_clean |>
mutate(across(diameter:shell_weight,
~ shapiro_test(.x)))
caranguejo_clean |>
mutate(across(where(is.numeric),
~ shapiro_test(.x)))
caranguejo_clean |>
mutate(across(c(length, diameter, height, weight, shucked_weight, viscera_weight, shell_weight), ~shapiro_test(.x)))
#testes de normalidade
caranguejo_clean |>
shapiro_test(length,
diameter,
height,
weight,
shucked_weight,
viscera_weight,
shell_weight)
caranguejo_clean |>
select(length, diameter, height, weight, shucked_weight, viscera_weight, shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x)))
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x)))
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
View()
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map_df(~ ks.test(.x, "pnorm", mean(.x), sd(.x)))
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
map_df(.x, x[[1]])
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x)))
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
class()
x = caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x)))
x
x[[1]]
ckass(x[[1]])
class(x[[1]])
summary(x[[1]])
attributes(x[[1]])
attributes(x[[1]])$names
str(x[[1]])
x[[1]]$p.value
names(x)
pluck(x[[1]], "p.value")
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
map_dfr(
\(x) {
tibble(variable   = names(x),
p_value = x |> pluck("p.value")
)
}
)
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
map_dfr(
\(x) {
tibble(p_value = x |> pluck("p.value")
)
}
)
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
map_dfr(
\(x) {
tibble(variable = x |> names(),
p_value = x |> pluck("p.value")
)
}
)
x[[1]]
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
map(~ ks.test(.x, "pnorm", mean(.x), sd(.x))) |>
map_dfr(\(x) {tibble(p_value = x |> pluck("p.value"))})
x
attr(x)
names(x)
caranguejo_clean |>
select(length:shell_weight) |>
imap_dfr(~ tibble(
variable = .y,
p_value = ks.test(.x, "pnorm", mean(.x), sd(.x)) |> pluck("p.value")
))
:imap
?imap
#teste de normalidade usando o Kolmogorov-Smirnov
caranguejo_clean |>
select(length:shell_weight) |>
imap_dfr(~ tibble(
variable = .y,
p_value = ks.test(.x, "pnorm", mean(.x), sd(.x)) |> pluck("p.value")
))
caranguejo_clean
#wilcox test
caranguejo_clean |>
wilcox_test(length~sex)
#wilcox test para multiplas variaveis
caranguejo_clean |>
select(sex, length:shell_weight) |>
imap_dfr(~ tibble(
variable = .y,
p_value = wilcox_test(.x~sex) |> pluck("p.value")
))
#### correlacao ####
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat()
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat() |>
cor_plot()
?cor_mat
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat(method = "pearson") |>
cor_plot()
caranguejo_clean |>
select(length:shell_weight) |>
# cor_mat(method = "pearson") |>
cor_plot(method = "pearson")
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat(method = "pearson") |>
cor_plot(method = "pearson")
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat(method = "pearson") |>
cor_plot(type = "lower")
caranguejo_clean |>
select(length:shell_weight) |>
cor_mat(method = "pearson")
caranguejo_clean
coracao = read_delim("datasets/heart_disease_predition_dataset/dataset_heart.csv")
coracao
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "masculino",
sex == 1 ~ "feminino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino")))
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
coracao_clean %>%
xtabs(~ sex + nametype, data = .)
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino")))
View(coracao)
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(sex = fct_relevel(heart_disease, c("não", "sim")))
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(
heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(sex = fct_relevel(
heart_disease,
c("não", "sim"))) |>
mutate(fasting_blood_sugar = case_when(
resting_blood_sugar <= 120 ~ "normal",
resting_blood_sugar >  120 ~ "alta")) |>
mutate(fasting_blood_sugar = fct_relevel(
fasting_blood_sugar,
c("normal", "alta")))
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(
heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(sex = fct_relevel(
heart_disease,
c("não", "sim"))) |>
mutate(fasting_blood_sugar = case_when(
fasting_blood_sugar == 0 ~ "normal",
fasting_blood_sugar == 1 ~ "alta")) |>
mutate(fasting_blood_sugar = fct_relevel(
fasting_blood_sugar,
c("normal", "alta")))
coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(
heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(heart_disease = fct_relevel(
heart_disease,
c("não", "sim"))) |>
mutate(fasting_blood_sugar = case_when(
fasting_blood_sugar == 0 ~ "normal",
fasting_blood_sugar == 1 ~ "alta")) |>
mutate(fasting_blood_sugar = fct_relevel(
fasting_blood_sugar,
c("normal", "alta")))
coracao_clean |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(
heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(heart_disease = fct_relevel(
heart_disease,
c("não", "sim"))) |>
mutate(fasting_blood_sugar = case_when(
fasting_blood_sugar == 0 ~ "normal",
fasting_blood_sugar == 1 ~ "alta")) |>
mutate(fasting_blood_sugar = fct_relevel(
fasting_blood_sugar,
c("normal", "alta")))
coracao_clean = coracao |>
clean_names() |>
mutate(sex = case_when(sex == 0 ~ "feminino",
sex == 1 ~ "masculino")) |>
mutate(sex = fct_relevel(sex, c("masculino", "feminino"))) |>
mutate(heart_disease = case_when(
heart_disease == 1 ~ "não",
heart_disease == 2 ~ "sim")) |>
mutate(heart_disease = fct_relevel(
heart_disease,
c("não", "sim"))) |>
mutate(fasting_blood_sugar = case_when(
fasting_blood_sugar == 0 ~ "normal",
fasting_blood_sugar == 1 ~ "alta")) |>
mutate(fasting_blood_sugar = fct_relevel(
fasting_blood_sugar,
c("normal", "alta")))
coracao_clean %>%
xtabs(~ sex + heart_disease, data = .)
coracao_clean %>%
xtabs(~ sex + heart_disease, data = .) |>
fisher_test()
coracao_clean %>%
xtabs(~ sex + heart_disease, data = .) |>
chisq_test()
View(coracao_clean)
